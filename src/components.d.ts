/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Option } from "./components/cn-multiselect/cn-multiselect";
export { Option } from "./components/cn-multiselect/cn-multiselect";
export namespace Components {
    interface CnMultiselect {
        /**
          * (optional) disable multiselect
         */
        "disabled": boolean;
        "disabledItems": any[];
        /**
          * (optional) max selected items
         */
        "maxSelectedItems": number;
        /**
          * (optional) enable multi values
         */
        "multiple": boolean;
        "name": string;
        /**
          * (optional) options
         */
        "options": Option[] | string;
        /**
          * (optional) placeholder
         */
        "placeholder": string;
        /**
          * (optional) search's placeholder
         */
        "placeholderSearch": string;
        /**
          * (optional) popup mode
         */
        "popup": boolean;
        /**
          * (optional) popup title
         */
        "popupTitle": string;
        /**
          * (optional) enable search
         */
        "search": boolean;
        /**
          * (optional) selected values
         */
        "selected": string[] | string;
    }
}
export interface CnMultiselectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCnMultiselectElement;
}
declare global {
    interface HTMLCnMultiselectElementEventMap {
        "changeValues": any[];
        "clickedSelectedItem": Option;
        "selectedItem": Option;
        "deselectedItem": Option;
    }
    interface HTMLCnMultiselectElement extends Components.CnMultiselect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCnMultiselectElementEventMap>(type: K, listener: (this: HTMLCnMultiselectElement, ev: CnMultiselectCustomEvent<HTMLCnMultiselectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCnMultiselectElementEventMap>(type: K, listener: (this: HTMLCnMultiselectElement, ev: CnMultiselectCustomEvent<HTMLCnMultiselectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCnMultiselectElement: {
        prototype: HTMLCnMultiselectElement;
        new (): HTMLCnMultiselectElement;
    };
    interface HTMLElementTagNameMap {
        "cn-multiselect": HTMLCnMultiselectElement;
    }
}
declare namespace LocalJSX {
    interface CnMultiselect {
        /**
          * (optional) disable multiselect
         */
        "disabled"?: boolean;
        "disabledItems"?: any[];
        /**
          * (optional) max selected items
         */
        "maxSelectedItems"?: number;
        /**
          * (optional) enable multi values
         */
        "multiple"?: boolean;
        "name"?: string;
        /**
          * (optional) event on change values
         */
        "onChangeValues"?: (event: CnMultiselectCustomEvent<any[]>) => void;
        /**
          * (optional) event on click on selected item
         */
        "onClickedSelectedItem"?: (event: CnMultiselectCustomEvent<Option>) => void;
        /**
          * (optional) event on deseleted item
         */
        "onDeselectedItem"?: (event: CnMultiselectCustomEvent<Option>) => void;
        /**
          * (optional) event on seleted item
         */
        "onSelectedItem"?: (event: CnMultiselectCustomEvent<Option>) => void;
        /**
          * (optional) options
         */
        "options"?: Option[] | string;
        /**
          * (optional) placeholder
         */
        "placeholder"?: string;
        /**
          * (optional) search's placeholder
         */
        "placeholderSearch"?: string;
        /**
          * (optional) popup mode
         */
        "popup"?: boolean;
        /**
          * (optional) popup title
         */
        "popupTitle"?: string;
        /**
          * (optional) enable search
         */
        "search"?: boolean;
        /**
          * (optional) selected values
         */
        "selected"?: string[] | string;
    }
    interface IntrinsicElements {
        "cn-multiselect": CnMultiselect;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cn-multiselect": LocalJSX.CnMultiselect & JSXBase.HTMLAttributes<HTMLCnMultiselectElement>;
        }
    }
}
